import time
from aiogram import Bot
from aiogram.types import Message
from core.keyboards.inline import cung_test_keyboard, to_result_cung, cung_result
from core.handlers.basic import chat_text1
from core.handlers.basic import special

users_data = {}
deleter = {}
question = ['–ù–∞–≤—ñ—Ç—å –Ω–µ–∑–Ω–∞—á–Ω—ñ –∑—É—Å–∏–ª–ª—è –≤–∏–∫–ª–∏–µ–∞—é—Ç—å —É –º–µ–Ω–µ –≤—Ç–æ–º—É', '–Ü–Ω–æ–¥—ñ –º–µ–Ω—ñ –¥—É–∂–µ –ª–µ–≥–∫–æ –∑–∞–ø–ª–∞–∫–∞—Ç–∏', '–ú–µ–Ω—ñ —á–∞—Å—Ç–æ –±—É–≤–∞—î –¥–æ—Å–∏—Ç—å —Å—É–º–Ω–æ', '–Ø –≤—ñ–¥—á—É–≤–∞—é –±–µ–∑—Å–æ–Ω–Ω—è', '–ú–µ–Ω—ñ –≤–∞–∂–∫–æ –∑–Ω–∞–π—Ç–∏ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º', '–Ø –Ω–µ –≤—ñ—Ä—é —É —Å–≤–æ—î –∫—Ä–∞—â–µ –º–∞–π–±—É—Ç–Ω—î', '–¢—ñ–ª—å–∫–∏ –≤—Ä–∞–Ω—Ü—ñ/–≤–µ—á–æ—Ä–∞–º–∏ —è –≤—ñ–¥—á—É–≤–∞—é —Å–µ–±–µ –∫—Ä–∞—â–µ', '–Ü–Ω–æ–¥—ñ –º–æ—î —Å–µ—Ä—Ü–µ –ø–æ—á–∏–Ω–∞—î –±–∏—Ç–∏—Å—è —à–≤–∏–¥—à–µ –±–µ–∑ –æ—Å–æ–±–ª–∏–≤–æ—ó –Ω–∞ —Ç–µ –ø—Ä–∏—á–∏–Ω–∏', '–û—Å—Ç–∞–Ω–Ω—ñ–º —á–∞—Å–æ–º —è —Ö—É–¥–Ω—É']

async def start_cung(message: Message, bot: Bot):
    deleter[message.from_user.id] = []
    deleter[message.from_user.id].insert(0, await bot.send_message(message.from_user.id, '–û—Å—Ç–∞–Ω–Ω—ñ–º —á–∞—Å–æ–º –º–µ–Ω–µ –≤—Å–µ –¥—Ä–∞—Ç—É—î', reply_markup=cung_test_keyboard()))
    users_data[message.from_user.id] = [0, 0, 0]
    time.sleep(1)
    try:
        for i in special[message.from_user.id]:
            await i.delete()
        special.clear()
    except KeyError:
        pass
    await chat_text1[message.from_user.id].delete()


async def true_cung(message: Message, bot: Bot):
    users_data[message.from_user.id][0] += 1

    if users_data[message.from_user.id][1] != 9:
        deleter[message.from_user.id].insert(0, await bot.send_message(message.from_user.id, f'{question[users_data[message.from_user.id][1]]}', reply_markup=cung_test_keyboard()))
    else:
        deleter[message.from_user.id].insert(0, await bot.send_message(message.from_user.id, '–ü–ï–†–ï–ì–õ–Ø–ù–£–¢–ò –†–ï–ó–£–õ–¨–¢–ê–¢ üìà', reply_markup=to_result_cung()))

    users_data[message.from_user.id][1] += 1
    time.sleep(1)
    await deleter[message.from_user.id][-1].delete()
    deleter[message.from_user.id].pop()


async def false_cung(message: Message, bot: Bot):
    users_data[message.from_user.id][0] -= 1

    if users_data[message.from_user.id][1] != 9:
        deleter[message.from_user.id].insert(0, await bot.send_message(message.from_user.id, f'{question[users_data[message.from_user.id][1]]}', reply_markup=cung_test_keyboard()))
    else:
        deleter[message.from_user.id].insert(0, await bot.send_message(message.from_user.id, '–ü–ï–†–ï–ì–õ–Ø–ù–£–¢–ò –†–ï–ó–£–õ–¨–¢–ê–¢ üìà', reply_markup=to_result_cung()))

    users_data[message.from_user.id][1] += 1
    time.sleep(1)
    await deleter[message.from_user.id][-1].delete()
    deleter[message.from_user.id].pop()


async def get_cung_result(message: Message, bot: Bot):
    if users_data[message.from_user.id][0] >= 5:
        deleter[message.from_user.id].insert(0, await bot.send_message(message.from_user.id, '–£ –≤–∞—Å –ø—ñ–¥–≤–∏—â–µ–Ω–∞ —Ç—Ä–∏–≤–æ–∂–Ω—ñ—Å—Ç—å !', reply_markup=cung_result()))
    else:
        deleter[message.from_user.id].insert(0, await bot.send_message(message.from_user.id, '–†—ñ–≤–µ–Ω—å —Ç—Ä–∏–≤–æ–∂–Ω–æ—Å—Ç—ñ —É –Ω–æ—Ä–º—ñ, –∞–ª–µ –∫—Ä–∞—â–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤ !', reply_markup=cung_result()))

    await deleter[message.from_user.id][-1].delete()
    deleter[message.from_user.id].pop()


